# -*- coding: utf-8 -*-
"""RadyaAdiAnggara.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10s492egp9dYl36o662vKMq6aTYr_7kLN

# Data Diri

- Nama : Radya Adi Anggara
- Domisili : Kulon Progo, Yogyakarta
- email : adiradya140@gmail.com
"""

# Commented out IPython magic to ensure Python compatibility.
#import library
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor
from sklearn.metrics import mean_squared_error

# %matplotlib inline

"""
---

##Data Loading
> Membaca data yang akan digunakan untuk membuat model"""

#loading data
house = pd.read_csv('https://raw.githubusercontent.com/radyaadi/Predictive-Analytics/master/Dataset/house.csv')
house

"""
---

##Exploratory Data Analysis - Deskripsi Variabel dan Informasi Dataset
>Melihat struktur data pada dataframe
"""

#info dataframe
house.info()

""">Melihat statistik data pada dataframe"""

house.describe()

""">Pengecekan terhadap dataset, apakah ada yang kosong atau tidak"""

house.isnull().sum()

""">Pengecekan terhadap dataset, apakah ada data duplikat atau tidak"""

print("Jumlah data duplikat : ",house.duplicated().sum())
house=house.drop_duplicates(keep="first")

""">Melihat korelasi antar data dengan price

Disini sqft_living variabel paling berpengaruh. 
"""

house.corr()["price"].sort_values(ascending=False)

""">Menampilkan diagram antar variabel"""

house.hist(bins=50, figsize=(20,15))
plt.show()

""">Menghapus kolom yang tidak relevan dan kurang berpengaruh

Berdasarkan data korelasi dan diagram, beberapa data dapat dihapus, antara lain :
- Data dengan nilai korelasi dibawah 0.1 (sqft_lot, sqft_lot15, yr_built, condition, long)
- Data tidak relevan (date, id, zipcode, yr_built, yr_renovated)
- Data dengan pesebaran dominan sebelah (sqft_basement)
"""

house = house.drop(['date','zipcode','id','long','condition','yr_built','yr_renovated','sqft_lot15','sqft_lot','sqft_basement'],axis=1)
house.head()

""">Mengecek outliner pada price"""

sns.boxplot(x=house['price'])

""">Mengilangkan outlier pada price"""

temp = 'price'
def removeOutliers(house, x):
    q1, q3 = np.percentile(house[x], 25), np.percentile(house[x], 75)
    iqr = q3 - q1
    cut_off = iqr * 1.5
    lower, upper = 1 ,  (q3 + cut_off)
    house = house[(house[x] < upper) & (house[x] > lower)]
    print('Outliers "{}" terhapus!\n'.format(x))
    return house

house= removeOutliers(house, 'price')
house.price.value_counts()

""">Mendefinisikan kolom dengan tipe numerik"""

numerical_features = ['bedrooms','bathrooms','sqft_living','floors','waterfront','view','grade','sqft_above','lat','sqft_living15']

"""

---

##Exploratory Data Analysis - Multivariate Analysis
>Mengecek hubungan antar fitur numerik melalui visualisasi data"""

# mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(house, diag_kind = 'kde')

""">Melihat korelasi antar data dengan heatmap"""

plt.figure(figsize=(10, 8))
correlation_matrix = house.corr().round(2)
# annot = True to print the values inside the square
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""

---

##Data Preparation
>Membagi dataset menjadi train dan test untuk diuji dalam model"""

X = house.drop(["price"],axis =1)
y = house["price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 123)

""">Mengecek data yang telah displit"""

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

""">Melakukan standarisasi data latih dengan scaler"""

scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""

---

##Model Deployment
>Mendefinisikan data frame untuk analisis model"""

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

""">Melatih model development dengan KNN"""

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_train)

""">Melatih model development dengan Random Forest"""

RF = RandomForestRegressor(criterion='mae',n_estimators=150,max_depth=8,random_state=42)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

""">Melatih model development dengan boosting algorithm"""

boosting = AdaBoostRegressor(learning_rate= 0.001,loss='exponential',n_estimators= 50,random_state=42)                     
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

""">Melakukan standarisasi data test dengan scaler"""

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""

---

##Evaluasi Model
>Evaluasi ketiga model dengan metrik MSE"""

mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
mse

""">Melihat plot metrik dengan bar chart"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

""">Menguji model untuk mendapat hasil yang paling optimal"""

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)

"""Berdasarkan hasil prediksi, model boosting algorithm mempunyai prediksi yang paling mendekati"""